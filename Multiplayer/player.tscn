[gd_scene load_steps=4 format=3 uid="uid://l0hf2dp7w5jn"]

[sub_resource type="GDScript" id="GDScript_2rqpx"]
script/source = "# player.gd
extends CharacterBody2D

const SPEED = 5.0
const JUMP_VELOCITY = 4.5

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

# Set by the authority, synchronized on spawn.
@export var player := 1 :
	set(id):
		player = id
		# Give authority over the player input to the appropriate peer.
		$PlayerInput.set_multiplayer_authority(id)

# Player synchronized input.
@onready var input = $PlayerInput

func _ready():
	# Set the camera as current if we are this player.
	if player == multiplayer.get_unique_id():
		$Camera3D.current = true
	# Only process on server.
	# EDIT: Let the client simulate player movement too to compesate network input latency.
	# set_physics_process(multiplayer.is_server())


func _physics_process(delta):
	# Add the gravity.
	if not is_on_floor():
		velocity.y -= gravity * delta

	# Handle jump.
	if input.jumping and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Reset jump state.
	input.jumping = false

	# Handle movement.
	var direction = (transform.basis * Vector3(input.direction.x, 0, input.direction.y)).normalized()
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)

	move_and_slide()

#KIll yourself
"

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_wcysc"]

[sub_resource type="GDScript" id="GDScript_6ywy5"]
script/source = "# player_input.gd
extends MultiplayerSynchronizer

# Set via RPC to simulate is_action_just_pressed.
@export var jumping := false

# Synchronized property.
@export var direction := Vector2()

func _ready():
	# Only process for the local player.
	set_process(get_multiplayer_authority() == multiplayer.get_unique_id())


@rpc(\"call_local\")
func jump():
	jumping = true


func _process(delta):
	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	direction = Input.get_vector(\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\")
	if Input.is_action_just_pressed(\"ui_accept\"):
		jump.rpc()
"

[node name="CharacterBody2D" type="Node2D"]
script = SubResource("GDScript_2rqpx")
player = null

[node name="Node2D" type="Node2D" parent="."]

[node name="PlayerSynchronizer" type="MultiplayerSynchronizer" parent="Node2D"]
root_path = NodePath("../..")
replication_config = SubResource("SceneReplicationConfig_wcysc")

[node name="PlayerInput" type="MultiplayerSynchronizer" parent="Node2D"]
root_path = NodePath("../PlayerSynchronizer")
replication_config = SubResource("SceneReplicationConfig_wcysc")
script = SubResource("GDScript_6ywy5")
